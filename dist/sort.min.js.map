{"version":3,"sources":["webpack:///sort/webpack/universalModuleDefinition","webpack:///sort/sort.min.js","webpack:///sort/webpack/bootstrap 4b2e6b0f4425e7f5025a","webpack:///sort/./lib/bubbleSort/bubbleSort.js","webpack:///sort/./lib/util/arraySwap.js","webpack:///sort/./lib/util/comparator.js","webpack:///sort/./lib/bubbleSort/bubbleSortOptimized.js","webpack:///sort/./lib/heapSort/heapSort.js","webpack:///sort/./lib/insertionSort/insertionSort.js","webpack:///sort/./lib/mergeSort/mergeSort.js","webpack:///sort/./lib/mergeSort/mergeSortInplace.js","webpack:///sort/./lib/quicksort/sortingNetworkDualPivotQuicksort.js","webpack:///sort/./lib/quicksort/sortingNetworkDualPivotQuicksort2.js","webpack:///sort/./lib/quicksort/dualPivotQuicksort.js","webpack:///sort/./lib/quicksort/quicksort.js","webpack:///sort/./lib/quicksort/quicksortFunctional.js","webpack:///sort/./lib/quicksort/quicksortInplace.js","webpack:///sort/./lib/selectionSort/selectionSort.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_bubbleSort","enumerable","get","_bubbleSortOptimized","_heapSort","_insertionSort","_mergeSort","_mergeSortInplace","_sortingNetworkDualPivotQuicksort","_sortingNetworkDualPivotQuicksort2","_dualPivotQuicksort","_quicksort","_quicksortFunctional","_quicksortInplace","_selectionSort","bubbleSort","array","comparator","arguments","length","undefined","_comparator","lexicographicComparator","lessThan","comparatorToLessThan","arraySwap","_arraySwap","arraySwapPartial","i","swapped","j","tmp","a","b","lessThanToComparator","reverse","fn","numericComparator","bubbleSortOptimized","n","newN","heapSort","heapify","index","heapSize","largest","left","right","Math","floor","insertionSort","mergeSort","merge","result","push","shift","concat","mid","slice","mergeSortInplace","min","max","range","dartDualPivotQuicksort","sort","INSERTION_SORT_THRESHOLD","quicksort","el","sixth","index1","index5","index3","index2","index4","el1","el2","el3","el4","el5","t","pivot1","pivot2","less","great","pivotsAreEqual","pivot","k","ak","comp","compPivot1","compPivot2","dartDualPivotQuicksort2","pivotsDiffer","outer1","outer2","dualPivotQuicksort","l","g","Array","prototype","quicksortFunctional","filter","x","quicksortInplace","selectionSort"],"mappings":";;;;;;;;;;;;;;;;;CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,KAAAD,IAEAD,EAAA,KAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GAE/B,YA2HA,SAASS,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAzHvFG,OAAOC,eAAepB,EAAS,cAC7BqB,OAAO,GAGT,IAAIC,GAAchB,EAAoB,EAEtCa,QAAOC,eAAepB,EAAS,cAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBO,GAAvBP,aAIX,IAAIU,GAAuBnB,EAAoB,EAE/Ca,QAAOC,eAAepB,EAAS,uBAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBU,GAAvBV,aAIX,IAAIW,GAAYpB,EAAoB,EAEpCa,QAAOC,eAAepB,EAAS,YAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBW,GAAvBX,aAIX,IAAIY,GAAiBrB,EAAoB,EAEzCa,QAAOC,eAAepB,EAAS,iBAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBY,GAAvBZ,aAIX,IAAIa,GAAatB,EAAoB,EAErCa,QAAOC,eAAepB,EAAS,aAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBa,GAAvBb,aAIX,IAAIc,GAAoBvB,EAAoB,EAE5Ca,QAAOC,eAAepB,EAAS,oBAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBc,GAAvBd,aAIX,IAAIe,GAAoCxB,EAAoB,EAE5Da,QAAOC,eAAepB,EAAS,oCAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBe,GAAvBf,aAIX,IAAIgB,GAAqCzB,EAAoB,GAE7Da,QAAOC,eAAepB,EAAS,qCAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBgB,GAAvBhB,aAIX,IAAIiB,GAAsB1B,EAAoB,GAE9Ca,QAAOC,eAAepB,EAAS,sBAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBiB,GAAvBjB,aAIX,IAAIkB,GAAa3B,EAAoB,GAErCa,QAAOC,eAAepB,EAAS,aAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBkB,GAAvBlB,aAIX,IAAImB,GAAuB5B,EAAoB,GAE/Ca,QAAOC,eAAepB,EAAS,uBAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBmB,GAAvBnB,aAIX,IAAIoB,GAAoB7B,EAAoB,GAE5Ca,QAAOC,eAAepB,EAAS,oBAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBoB,GAAvBpB,aAIX,IAAIqB,GAAiB9B,EAAoB,GAEzCa,QAAOC,eAAepB,EAAS,iBAC7BuB,YAAY,EACZC,IAAK,WACH,MAAOT,GAAuBqB,GAAvBrB,eAQN,SAASd,EAAQD,EAASM,GAE/B,YEzKc,SAAS+B,GAAYC,GFkM/B,GElMsCC,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GACnCK,GAAW,EAAAF,EAAAG,sBAAqBP,GAChCQ,GAAY,EAAAC,EAAAC,kBAAiBX,GAC7BG,EAASH,EAAMG,OACfS,EAAAR,OACAS,EAAAT,MALyE,GAO1E,KACCS,GAAU,EAILD,EAAI,EAAOT,EAAJS,EAAYA,IAEhBL,EAASP,EAAMY,GAAIZ,EAAMY,EAAI,MAC7BH,EAAUG,EAAGA,EAAI,GADiBC,GAKxB,EAZnBV,WAiBMU,EACT,OAAOb,GFkJVnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,aE9KuBqC,CFgLvB,IAAIW,GAAa1C,EAAoB,GAEjCqC,EAAcrC,EAAoB,EA4CtCL,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,GAEtB,YG9OM,SAAS+C,GAAWT,EAAOY,EAAGE,GACjC,GAAIC,GAAMf,EAAMc,EAChBd,GAAMc,GAAKd,EAAMY,GACjBZ,EAAMY,GAAKG,EASR,QAASJ,GAAkBX,GAC9B,MAAO,UAACY,EAAGE,GACP,GAAIC,GAAMf,EAAMc,EAChBd,GAAMc,GAAKd,EAAMY,GACjBZ,EAAMY,GAAKG,GHgOlBlC,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,EGnPe+C,YHoPf/C,EGxOeiD,oBHqQV,SAAShD,EAAQD,GAEtB,YIpRM,SAAS8C,GAAsBP,GAClC,MAAO,UAACe,EAAGC,GJoSV,MIpSgBhB,GAAWe,EAAGC,GAAK,GAQjC,QAASC,GAAsBX,GAClC,MAAO,UAACS,EAAGC,GJsSV,MItSgBV,GAASS,EAAGC,GAAK,GAAOV,EAASU,EAAGD,GAAS,EAAJ,GAQvD,QAASG,GAASC,GACrB,MAAO,UAACJ,EAAGC,GJwSV,MIxSgBG,GAAGH,EAAGD,IAYpB,QAASV,GAAyBU,EAAGC,GACxC,MAAWA,GAAJD,EAAQ,GAAMA,EAAIC,EAAI,EAAI,EAU9B,QAASI,GAAmBL,EAAGC,GAClC,MAAOD,GAAIC,EJ2OdpC,OAAOC,eAAepB,EAAS,cAC7BqB,OAAO,IAETrB,EIzRe8C,uBJ0Rf9C,EIjRewD,uBJkRfxD,EIzQeyD,UJ0QfzD,EI7Pe4C,0BJ8Pf5C,EInPe2D,qBJ+SV,SAAS1D,EAAQD,EAASM,GAE/B,YKnVc,SAASsD,GAAqBtB,GLyWxC,GKzW+CC,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GAC5CK,GAAW,EAAAF,EAAAG,sBAAqBP,GAChCQ,GAAY,EAAAC,EAAAC,kBAAiBX,GAC7BuB,EAAIvB,EAAMG,OACVS,EAAAR,OACAoB,EAAApB,MACJ,GAAG,CAKC,IADAoB,EAAO,EACFZ,EAAI,EAAOW,EAAJX,EAAOA,IACXL,EAASP,EAAMY,GAAIZ,EAAMY,EAAI,MAC7BH,EAAUG,EAAGA,EAAI,GACjBY,EAAOZ,EAGfW,GAAIC,QACO,IAAND,EACT,OAAOvB,GLkUVnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,aKxVuB4D,CL0VvB,IAAIZ,GAAa1C,EAAoB,GAEjCqC,EAAcrC,EAAoB,EAmCtCL,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAE/B,YMzYc,SAASyD,GAAUzB,GAA6C,QASlE0B,GAASC,EAAOC,GACrB,GAAIC,GAAUF,EACVG,EAAO,EAAIH,EAAQ,EACnBI,EAAQD,EAAO,CACRF,GAAPE,GAAmBvB,EAASP,EAAM6B,GAAU7B,EAAM8B,MAClDD,EAAUC,GAEFF,EAARG,GAAoBxB,EAASP,EAAM6B,GAAU7B,EAAM+B,MACnDF,EAAUE,GAEVF,IAAYF,IACZlB,EAAUkB,EAAOE,GACjBH,EAAQG,EAASD,IAKzB,INiYC,GM3ZoC3B,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GACjCK,GAAW,EAAAF,EAAAG,sBAAqBP,GAChCQ,GAAY,EAAAC,EAAAC,kBAAiBX,GAsB7BG,EAASH,EAAMG,OACfS,EAAIoB,KAAKC,MAAM9B,EAAS,GACrBS,KACHc,EAAQd,EAAGT,EAGf,KADAS,EAAIT,EACGS,KACHH,EAAU,EAAGG,GACbc,EAAQ,EAAGd,EAEf,OAAOZ,GNyWVnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,aM9YuB+D,CNgZvB,IAAIf,GAAa1C,EAAoB,GAEjCqC,EAAcrC,EAAoB,EA8CtCL,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAE/B,YOvcc,SAASkE,GAAelC,GPudlC,GOvdyCC,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GACtCK,GAAW,EAAAF,EAAAG,sBAAqBP,GAChCE,EAASH,EAAMG,OACfpB,EAAAqB,OACAQ,EAAAR,OACAU,EAAAV,MACJ,KAAKQ,EAAI,EAAOT,EAAJS,EAAYA,IAAK,CAEzB,IADA7B,EAAQiB,EAAMY,GACTE,EAAIF,EAAI,EAAGE,EAAI,IAAMP,EAASxB,EAAOiB,EAAMc,IAAKA,IACjDd,EAAMc,EAAI,GAAKd,EAAMc,EAEzBd,GAAMc,EAAI,GAAK/B,EAEnB,MAAOiB,GP4bVnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,aO5cuBwE,CP8cvB,IAAI7B,GAAcrC,EAAoB,EAyBtCL,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAE/B,YQ7ec,SAASmE,GAAWnC,GAE/B,QAASoC,GAAON,EAAMC,GAElB,IADA,GAAIM,MACGP,EAAK3B,OAAS,GAAK4B,EAAM5B,OAAS,GACrCkC,EAAOC,KAAK/B,EAASuB,EAAK,GAAIC,EAAM,IAAMD,EAAKS,QAAUR,EAAMQ,QAEnE,OAAOF,GAAOG,OAAOV,EAAK3B,OAAS2B,EAAOC,GAG9C,QAASzC,GAAYU,GACjB,GAAIA,EAAMG,QAAU,EAChB,MAAOH,EAEX,IAAIyC,GAAMT,KAAKC,MAAMjC,EAAMG,OAAS,EACpC,OAAOiC,GAAM9C,EAAWU,EAAM0C,MAAM,EAAGD,IAAOnD,EAAWU,EAAM0C,MAAMD,KR8exE,GQ7fqCxC,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GAClCK,GAAW,EAAAF,EAAAG,sBAAqBP,EAiBpC,OAAOX,GAAWU,GR6drBnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,aQlfuByE,CRofvB,IAAI9B,GAAcrC,EAAoB,EA8BtCL,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAE/B,YSvhBc,SAAS2E,GAAkB3C,GAItC,QAASoC,GAAOQ,EAAKC,EAAKJ,GACtB,GAAI7B,GAAAR,OACAU,EAAAV,MACJ,KAAKQ,EAAIgC,EAASH,EAAJ7B,EAASA,IACnB,GAAIL,EAASP,EAAMyC,GAAMzC,EAAMY,IAE3B,IADAH,EAAUG,EAAG6B,GACR3B,EAAI2B,EAASI,EAAJ/B,EAASA,IACfP,EAASP,EAAMc,EAAI,GAAId,EAAMc,KAC7BL,EAAUK,EAAGA,EAAI,GAOrC,QAASxB,GAAYsD,EAAKC,GACtB,GAAIC,GAAQD,EAAMD,CAClB,IAAc,IAAVE,EAEG,GAAc,IAAVA,EACHvC,EAASP,EAAM6C,GAAM7C,EAAM4C,KAC3BnC,EAAUmC,EAAKC,OAEhB,CACH,GAAIJ,GAAMT,KAAKC,OAAOW,EAAMC,GAAO,EACnCvD,GAAWsD,EAAKH,GAChBnD,IAAamD,EAAKI,GAClBT,EAAMQ,EAAKC,EAAKJ,IT0gBvB,GSziB4CxC,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GACzCK,GAAW,EAAAF,EAAAG,sBAAqBP,GAChCQ,GAAY,EAAAC,EAAAC,kBAAiBX,EAiCjC,OADAV,GAAW,EAAGU,EAAMG,OAAS,GACtBH,ETsfVnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,aS5hBuBiF,CT8hBvB,IAAIjC,GAAa1C,EAAoB,GAEjCqC,EAAcrC,EAAoB,EA+CtCL,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAE/B,YUtlBc,SAAS+E,GAAwB/C,GAI5C,QAASgD,GAAMlB,EAAMC,GACIkB,EAAjBlB,EAASD,EACTI,EAAcJ,EAAMC,GAEpBmB,EAAUpB,EAAMC,GAIxB,QAASG,GAAeJ,EAAMC,GAC1B,IAAK,GAAInB,GAAIkB,EAAO,EAAQC,GAALnB,EAAYA,IAAK,CAGpC,IAFA,GAAIuC,GAAKnD,EAAMY,GACXE,EAAIF,EACDE,EAAKgB,GAAU7B,EAAWD,EAAMc,EAAI,GAAIqC,GAAM,GACjDnD,EAAMc,GAAKd,EAAMc,EAAI,GACrBA,GAEJd,GAAMc,GAAKqC,GAInB,QAASD,GAAWpB,EAAMC,GAEtB,GAAIqB,IAASrB,EAAQD,EAAO,GAAK,EAAI,EACjCuB,EAASvB,EAAOsB,EAChBE,EAASvB,EAAQqB,EACjBG,EAASzB,EAAQC,IAAW,EAC5ByB,EAASD,EAASH,EAClBK,EAASF,EAASH,EAElBM,EAAM1D,EAAMqD,GACZM,EAAM3D,EAAMwD,GACZI,EAAM5D,EAAMuD,GACZM,EAAM7D,EAAMyD,GACZK,EAAM9D,EAAMsD,GAEZS,EAAA3D,MAEAH,GAAWyD,EAAKC,GAAO,IACvBI,EAAIL,EACJA,EAAMC,EACNA,EAAMI,GAEN9D,EAAW4D,EAAKC,GAAO,IACvBC,EAAIF,EACJA,EAAMC,EACNA,EAAMC,GAEN9D,EAAWyD,EAAKE,GAAO,IACvBG,EAAIL,EACJA,EAAME,EACNA,EAAMG,GAEN9D,EAAW0D,EAAKC,GAAO,IACvBG,EAAIJ,EACJA,EAAMC,EACNA,EAAMG,GAEN9D,EAAWyD,EAAKG,GAAO,IACvBE,EAAIL,EACJA,EAAMG,EACNA,EAAME,GAEN9D,EAAW2D,EAAKC,GAAO,IACvBE,EAAIH,EACJA,EAAMC,EACNA,EAAME,GAEN9D,EAAW0D,EAAKG,GAAO,IACvBC,EAAIJ,EACJA,EAAMG,EACNA,EAAMC,GAEN9D,EAAW0D,EAAKC,GAAO,IACvBG,EAAIJ,EACJA,EAAMC,EACNA,EAAMG,GAEN9D,EAAW4D,EAAKC,GAAO,IACvBC,EAAIF,EACJA,EAAMC,EACNA,EAAMC,EAGV,IAAIC,GAASL,EACTM,EAASJ,CAEb7D,GAAMqD,GAAUK,EAChB1D,EAAMuD,GAAUK,EAChB5D,EAAMsD,GAAUQ,EAEhB9D,EAAMwD,GAAUxD,EAAM8B,GACtB9B,EAAMyD,GAAUzD,EAAM+B,EAEtB,IAAImC,GAAOpC,EAAO,EACdqC,EAAQpC,EAAQ,EAEhBqC,EAAiD,IAA/BnE,EAAW+D,EAAQC,EACzC,IAAIG,EAEA,IAAK,GADDC,GAAQL,EACHM,EAAIJ,EAAWC,GAALG,IAAcA,EAAG,CAChC,GAAIC,GAAKvE,EAAMsE,GACXE,EAAOvE,EAAWsE,EAAIF,EAC1B,IAAW,EAAPG,EACIF,IAAMJ,IACNlE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,GAAQK,GAElBL,QACG,IAAIM,EAAO,EACd,OAAa,CAET,GADAA,EAAOvE,EAAWD,EAAMmE,GAAQE,KAC5BG,EAAO,GAEJ,IAAW,EAAPA,EAAU,CACjBxE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,KAAUlE,EAAMmE,GACtBnE,EAAMmE,KAAWI,CACjB,OAEAvE,EAAMsE,GAAKtE,EAAMmE,GACjBnE,EAAMmE,KAAWI,CACjB,OATAJ,SAehB,KAAK,GAAIG,GAAIJ,EAAWC,GAALG,EAAYA,IAAK,CAChC,GAAIC,GAAKvE,EAAMsE,GACXG,EAAaxE,EAAWsE,EAAIP,EAChC,IAAiB,EAAbS,EACIH,IAAMJ,IACNlE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,GAAQK,GAElBL,QACG,CACH,GAAIQ,GAAazE,EAAWsE,EAAIN,EAChC,IAAIS,EAAa,EACb,OAAa,CACT,GAAIF,GAAOvE,EAAWD,EAAMmE,GAAQF,EACpC,MAAIO,EAAO,GAKJ,CACHA,EAAOvE,EAAWD,EAAMmE,GAAQH,GACrB,EAAPQ,GACAxE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,KAAUlE,EAAMmE,GACtBnE,EAAMmE,KAAWI,IAEjBvE,EAAMsE,GAAKtE,EAAMmE,GACjBnE,EAAMmE,KAAWI,EAErB,OAbA,GADAJ,IACYG,EAARH,EACA,QA4B5B,GARAnE,EAAM8B,GAAQ9B,EAAMkE,EAAO,GAC3BlE,EAAMkE,EAAO,GAAKF,EAClBhE,EAAM+B,GAAS/B,EAAMmE,EAAQ,GAC7BnE,EAAMmE,EAAQ,GAAKF,EAEnBjB,EAAKlB,EAAMoC,EAAO,GAClBlB,EAAKmB,EAAQ,EAAGpC,IAEZqC,EAAJ,CAIA,GAAWf,EAAPa,GAAiBC,EAAQb,EAAQ,CACjC,KAA2C,IAApCrD,EAAWD,EAAMkE,GAAOF,IAC3BE,GAEJ,MAA4C,IAArCjE,EAAWD,EAAMmE,GAAQF,IAC5BE,GAGJ,KAAK,GAAIG,GAAIJ,EAAWC,GAALG,EAAYA,IAAK,CAChC,GAAIC,GAAKvE,EAAMsE,GACXG,EAAaxE,EAAWsE,EAAIP,EAChC,IAAmB,IAAfS,EACIH,IAAMJ,IACNlE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,GAAQK,GAElBL,QACG,CACH,GAAIQ,GAAazE,EAAWsE,EAAIN,EAChC,IAAmB,IAAfS,EACA,OAAa,CACT,GAAIF,GAAOvE,EAAWD,EAAMmE,GAAQF,EACpC,IAAa,IAATO,EAKG,CACHA,EAAOvE,EAAWD,EAAMmE,GAAQH,GACrB,EAAPQ,GACAxE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,KAAUlE,EAAMmE,GACtBnE,EAAMmE,KAAWI,IAEjBvE,EAAMsE,GAAKtE,EAAMmE,GACjBnE,EAAMmE,KAAWI,EAErB,OAbA,GADAJ,IACYG,EAARH,EACA,SAmB5BnB,EAAKkB,EAAMC,IVsYd,GUtmBkDlE,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GAE7C+C,EAA2B,EAkOjC,OADAD,GAAK,EAAGhD,EAAMG,OAAS,GAChBH,EVoXVnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,aU3lBuBqF,CV6lBvB,IAAI1C,GAAcrC,EAAoB,EAgPtCL,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAE/B,YWn1Bc,SAAS2G,GAAyB3E,GAI7C,QAASgD,GAAMlB,EAAMC,GACIkB,EAAjBlB,EAASD,EACTI,EAAcJ,EAAMC,GAEpBmB,EAAUpB,EAAMC,GAIxB,QAASG,GAAeJ,EAAMC,GAC1B,IAAK,GAAInB,GAAIkB,EAAO,EAAQC,GAALnB,EAAYA,IAAK,CAGpC,IAFA,GAAIuC,GAAKnD,EAAMY,GACXE,EAAIF,EACDE,EAAKgB,GAAU7B,EAAWD,EAAMc,EAAI,GAAIqC,GAAM,GACjDnD,EAAMc,GAAKd,EAAMc,EAAI,GACrBA,GAEJd,GAAMc,GAAKqC,GAInB,QAASD,GAAWpB,EAAMC,GAEtB,GAAIqB,IAASrB,EAAQD,EAAO,GAAK,EAAI,EACjCuB,EAASvB,EAAOsB,EAChBE,EAASvB,EAAQqB,EACjBG,EAASzB,EAAQC,IAAW,EAC5ByB,EAASD,EAASH,EAClBK,EAASF,EAASH,EAElBM,EAAM1D,EAAMqD,GACZM,EAAM3D,EAAMwD,GACZI,EAAM5D,EAAMuD,GACZM,EAAM7D,EAAMyD,GACZK,EAAM9D,EAAMsD,GAEZS,EAAA3D,MAEAH,GAAWyD,EAAKC,GAAO,IACvBI,EAAIL,EACJA,EAAMC,EACNA,EAAMI,GAEN9D,EAAW4D,EAAKC,GAAO,IACvBC,EAAIF,EACJA,EAAMC,EACNA,EAAMC,GAEN9D,EAAWyD,EAAKE,GAAO,IACvBG,EAAIL,EACJA,EAAME,EACNA,EAAMG,GAEN9D,EAAW0D,EAAKC,GAAO,IACvBG,EAAIJ,EACJA,EAAMC,EACNA,EAAMG,GAEN9D,EAAWyD,EAAKG,GAAO,IACvBE,EAAIL,EACJA,EAAMG,EACNA,EAAME,GAEN9D,EAAW2D,EAAKC,GAAO,IACvBE,EAAIH,EACJA,EAAMC,EACNA,EAAME,GAEN9D,EAAW0D,EAAKG,GAAO,IACvBC,EAAIJ,EACJA,EAAMG,EACNA,EAAMC,GAEN9D,EAAW0D,EAAKC,GAAO,IACvBG,EAAIJ,EACJA,EAAMC,EACNA,EAAMG,GAEN9D,EAAW4D,EAAKC,GAAO,IACvBC,EAAIF,EACJA,EAAMC,EACNA,EAAMC,EAGV,IAAIC,GAASL,EACTM,EAASJ,CAEb7D,GAAMqD,GAAUK,EAChB1D,EAAMuD,GAAUK,EAChB5D,EAAMsD,GAAUQ,EAEhB9D,EAAMwD,GAAUxD,EAAM8B,GACtB9B,EAAMyD,GAAUzD,EAAM+B,EAEtB,IAAImC,GAAOpC,EAAO,EACdqC,EAAQpC,EAAQ,EAEhB6C,EAA+C,IAA/B3E,EAAW+D,EAAQC,EACvC,IAAIW,EACAC,EACA,IAAK,GAAIP,GAAIJ,EAAWC,GAALG,EAAYA,IAAK,CAChC,GAAIC,GAAKvE,EAAMsE,EACf,IAAIrE,EAAWsE,EAAIP,GAAU,EACrBM,IAAMJ,IACNlE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,GAAQK,GAElBL,QACG,IAAIjE,EAAWsE,EAAIN,GAAU,EAAG,CACnC,KAAOhE,EAAWD,EAAMmE,GAAQF,GAAU,GACtC,GAAIE,MAAYG,EACZ,KAAMO,EAGV5E,GAAWD,EAAMmE,GAAQH,GAAU,GACnChE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,KAAUlE,EAAMmE,GACtBnE,EAAMmE,KAAWI,IAEjBvE,EAAMsE,GAAKtE,EAAMmE,GACjBnE,EAAMmE,KAAWI,QAK7B,KAAK,GAAID,GAAIJ,EAAWC,GAALG,IAAcA,EAAG,CAChC,GAAIC,GAAKvE,EAAMsE,GACXE,EAAOvE,EAAWsE,EAAIP,EAC1B,IAAW,EAAPQ,EACIF,IAAMJ,IACNlE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,GAAQK,GAElBL,QACG,IAAIM,EAAO,EAAG,CACjB,KAAOvE,EAAWD,EAAMmE,GAAQH,GAAU,GACtCG,GAEAlE,GAAWD,EAAMmE,GAAQH,GAAU,GACnChE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,KAAUlE,EAAMmE,GACtBnE,EAAMmE,KAAWI,IAEjBvE,EAAMsE,GAAKtE,EAAMmE,GACjBnE,EAAMmE,KAAWI,IAcjC,GARAvE,EAAM8B,GAAQ9B,EAAMkE,EAAO,GAC3BlE,EAAMkE,EAAO,GAAKF,EAClBhE,EAAM+B,GAAS/B,EAAMmE,EAAQ,GAC7BnE,EAAMmE,EAAQ,GAAKF,EAEnBjB,EAAKlB,EAAMoC,EAAO,GAClBlB,EAAKmB,EAAQ,EAAGpC,GAEX6C,EAAL,CAIA,GAAWvB,EAAPa,GAAiBC,EAAQb,EAAQ,CACjC,KAA2C,IAApCrD,EAAWD,EAAMkE,GAAOF,IAC3BE,GAEJ,MAA4C,IAArCjE,EAAWD,EAAMmE,GAAQF,IAC5BE,GAGJW,GACA,IAAK,GAAIR,GAAIJ,EAAWC,GAALG,EAAYA,IAAK,CAChC,GAAIC,GAAKvE,EAAMsE,EACf,IAA+B,IAA3BrE,EAAWsE,EAAIN,GAAe,CAC9B,KAA4C,IAArChE,EAAWD,EAAMmE,GAAQF,IAC5B,GAAIE,MAAYG,EACZ,KAAMQ,EAG2B,KAArC7E,EAAWD,EAAMmE,GAAQH,IACzBhE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,GAAQF,GAEdhE,EAAMsE,GAAKtE,EAAMmE,GAErBnE,EAAMmE,KAAWF,MACiB,KAA3BhE,EAAWsE,EAAIP,KACtBhE,EAAMsE,GAAKtE,EAAMkE,GACjBlE,EAAMkE,KAAUF,IAI5BhB,EAAKkB,EAAMC,IXgqBd,GWn2BmDlE,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GAE9C+C,EAA2B,EAoMjC,OADAD,GAAK,EAAGhD,EAAMG,OAAS,GAChBH,EX+oBVnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,aWx1BuBiH,CX01BvB,IAAItE,GAAcrC,EAAoB,EAgNtCL,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAE/B,YY/iCc,SAAS+G,GAAoB/E,GAGxC,QAASkD,GAAWpB,EAAMC,GACtB,GAAWA,EAAPD,EAAc,CACVvB,EAASP,EAAM+B,GAAQ/B,EAAM8B,KAC7BrB,EAAUqB,EAAMC,EAEpB,IAAIiC,GAAShE,EAAM8B,GACfmC,EAASjE,EAAM+B,GACfiD,EAAIlD,EAAO,EACXmD,EAAIlD,EAAQ,EACZuC,EAAIU,CACR,KAAKV,EAAQW,GAALX,EAAQA,IACZ,GAAI/D,EAASP,EAAMsE,GAAIN,GACnBvD,EAAU6D,EAAGU,SACV,KAAKzE,EAASP,EAAMsE,GAAIL,GAAS,CACpC,KAAO1D,EAAS0D,EAAQjE,EAAMiF,KAAWA,EAAJX,KAC/BW,CAENxE,GAAU6D,EAAGW,KACT1E,EAASP,EAAMsE,GAAIN,IACnBvD,EAAU6D,EAAGU,KAIzBvE,EAAUqB,IAAQkD,GAClBvE,EAAUsB,IAASkD,GACnB/B,EAAUpB,EAAMkD,EAAI,GACpB9B,EAAU8B,EAAI,EAAGC,EAAI,GACrB/B,EAAU+B,EAAI,EAAGlD,IZmiCxB,GYjkC8C9B,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GAC3CK,GAAW,EAAAF,EAAAG,sBAAqBP,GAChCQ,GAAY,EAAAC,EAAAC,kBAAiBX,EAgCjC,OADAkD,GAAU,EAAGlD,EAAMG,OAAS,GACrBH,EZ+gCVnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,aYpjCuBqH,CZsjCvB,IAAIrE,GAAa1C,EAAoB,GAEjCqC,EAAcrC,EAAoB,EA8CtCL,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAE/B,Ya3mCc,SAASkF,GAAWlD,GAE/B,QAASL,GAAYK,GACjB,GAAIA,EAAMG,QAAU,EAChB,MAAOH,EASX,KAPA,GAAI8B,MACAC,KACAJ,EAAQ,EACRxB,EAASH,EAAMG,OACfkE,EAAQrE,EAAM,GACdjB,EAAAqB,SAEKuB,EAAQxB,GACbpB,EAAQiB,EAAM2B,GACVpB,EAASxB,EAAOsF,GAChBvC,EAAKQ,KAAKvD,GAEVgD,EAAMO,KAAKvD,EAGnB,OAAOyD,GAAOnE,KAAKsB,EAAWmC,GAAOuC,EAAO1E,EAAWoC,IbwmC1D,Ga7nCqC9B,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GAClCK,GAAW,EAAAF,EAAAG,sBAAqBP,EAsBpC,OAAON,GAAWK,GbslCrBnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,aahnCuBwF,CbknCvB,IAAI7C,GAAcrC,EAAoB,Ga1nCnCwE,EAAS0C,MAAMC,UAAU3C,Mb+pC5B7E,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAE/B,Yc5pCc,SAASoH,GAAqBpF,GACzC,QAASkD,GAAWlD,GAChB,GAAIA,EAAMG,QAAU,EAChB,MAAOH,EAEX,IAAIqE,GAAQrE,EAAMgC,KAAKC,MAAMjC,EAAMG,OAAS,GAC5C,OAAOqC,GAAOnE,KACV6E,EAAUlD,EAAMqF,OAAO,SAAAC,GdgrCtB,MchrC2BrF,GAAWqF,EAAGjB,GAAS,KACnDrE,EAAMqF,OAAO,SAAAC,GdirCZ,McjrC0C,KAAzBrF,EAAWqF,EAAGjB,KAChCnB,EAAUlD,EAAMqF,OAAO,SAAAC,GdkrCtB,MclrC2BrF,GAAWqF,EAAGjB,GAAS,MdsqC1D,Gc/qC+CpE,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,EAWhD,OAAOgD,GAAUlD,GdmpCpBnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,acjqCuB0H,CdmqCvB,IAAI/E,GAAcrC,EAAoB,Gc5qCnCwE,EAAS0C,MAAMC,UAAU3C,MdysC5B7E,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAE/B,YevsCc,SAASuH,GAAkBvF,GAGtC,QAASkD,GAAWpB,EAAMC,GACtB,GAAWA,EAAPD,EAAc,CACd,GAAIuC,GAAQrE,EAAM8B,EAAQC,GAAU,GAChCnB,EAAIkB,EACJhB,EAAIiB,CACR,GAAG,CACC,KAAOxB,EAASP,EAAMY,GAAIyD,IACtBzD,GAEJ,MAAOL,EAAS8D,EAAOrE,EAAMc,KACzBA,GAEKA,IAALF,GACAH,EAAUG,IAAKE,WAETA,GAALF,EACTsC,GAAUpB,EAAMhB,GAChBoC,EAAUtC,EAAGmB,IfssCpB,Ge1tC4C9B,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GACzCK,GAAW,EAAAF,EAAAG,sBAAqBP,GAChCQ,GAAY,EAAAC,EAAAC,kBAAiBX,EAsBjC,OADAkD,GAAU,EAAGlD,EAAMG,OAAS,GACrBH,EfirCVnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,ae5sCuB6H,Cf8sCvB,IAAI7E,GAAa1C,EAAoB,GAEjCqC,EAAcrC,EAAoB,EAqCtCL,GAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAE/B,YgB5vCc,SAASwH,GAAexF,GhB8wClC,GgB9wCyCC,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAG,EAAAC,wBAAAJ,UAAA,GACtCK,GAAW,EAAAF,EAAAG,sBAAqBP,GAChCQ,GAAY,EAAAC,EAAAC,kBAAiBX,GAC7BG,EAASH,EAAMG,OACfyC,EAAAxC,OACAQ,EAAAR,OACAU,EAAAV,MAEJ,KAAKQ,EAAI,EAAOT,EAAJS,EAAYA,IAAK,CAEzB,IADAgC,EAAMhC,EACDE,EAAIF,EAAI,EAAOT,EAAJW,EAAYA,IACpBP,EAASP,EAAMc,GAAId,EAAM4C,MACzBA,EAAM9B,EAGVF,KAAMgC,GACNnC,EAAUG,EAAGgC,GAGrB,MAAO5C,GhB2uCVnB,OAAOC,eAAepB,EAAS,cAC3BqB,OAAO,IAEXrB,agBjwCuB8H,ChBmwCvB,IAAI9E,GAAa1C,EAAoB,GAEjCqC,EAAcrC,EAAoB,EA+BtCL,GAAOD,QAAUA,EAAQ","file":"sort.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Sort\"] = factory();\n\telse\n\t\troot[\"Sort\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Sort\"] = factory();\n\telse\n\t\troot[\"Sort\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _bubbleSort = __webpack_require__(1);\n\t\n\tObject.defineProperty(exports, 'bubbleSort', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_bubbleSort).default;\n\t  }\n\t});\n\t\n\tvar _bubbleSortOptimized = __webpack_require__(4);\n\t\n\tObject.defineProperty(exports, 'bubbleSortOptimized', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_bubbleSortOptimized).default;\n\t  }\n\t});\n\t\n\tvar _heapSort = __webpack_require__(5);\n\t\n\tObject.defineProperty(exports, 'heapSort', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_heapSort).default;\n\t  }\n\t});\n\t\n\tvar _insertionSort = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'insertionSort', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_insertionSort).default;\n\t  }\n\t});\n\t\n\tvar _mergeSort = __webpack_require__(7);\n\t\n\tObject.defineProperty(exports, 'mergeSort', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_mergeSort).default;\n\t  }\n\t});\n\t\n\tvar _mergeSortInplace = __webpack_require__(8);\n\t\n\tObject.defineProperty(exports, 'mergeSortInplace', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_mergeSortInplace).default;\n\t  }\n\t});\n\t\n\tvar _sortingNetworkDualPivotQuicksort = __webpack_require__(9);\n\t\n\tObject.defineProperty(exports, 'sortingNetworkDualPivotQuicksort', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_sortingNetworkDualPivotQuicksort).default;\n\t  }\n\t});\n\t\n\tvar _sortingNetworkDualPivotQuicksort2 = __webpack_require__(10);\n\t\n\tObject.defineProperty(exports, 'sortingNetworkDualPivotQuicksort2', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_sortingNetworkDualPivotQuicksort2).default;\n\t  }\n\t});\n\t\n\tvar _dualPivotQuicksort = __webpack_require__(11);\n\t\n\tObject.defineProperty(exports, 'dualPivotQuicksort', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_dualPivotQuicksort).default;\n\t  }\n\t});\n\t\n\tvar _quicksort = __webpack_require__(12);\n\t\n\tObject.defineProperty(exports, 'quicksort', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_quicksort).default;\n\t  }\n\t});\n\t\n\tvar _quicksortFunctional = __webpack_require__(13);\n\t\n\tObject.defineProperty(exports, 'quicksortFunctional', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_quicksortFunctional).default;\n\t  }\n\t});\n\t\n\tvar _quicksortInplace = __webpack_require__(14);\n\t\n\tObject.defineProperty(exports, 'quicksortInplace', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_quicksortInplace).default;\n\t  }\n\t});\n\t\n\tvar _selectionSort = __webpack_require__(15);\n\t\n\tObject.defineProperty(exports, 'selectionSort', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_selectionSort).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = bubbleSort;\n\t\n\tvar _arraySwap = __webpack_require__(2);\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\t/**\n\t * Standard Bubble Sort\n\t * Sometimes referred to as sinking sort, is a simple sorting algorithm that\n\t * repeatedly steps through the list to be sorted, compares each pair of adjacent\n\t * items and swaps them if they are in the wrong order. The pass through the list\n\t * is repeated until no swaps are needed, which indicates that the list is sorted.\n\t *\n\t * Bubble sort has worst-case and average complexity both О(n^2), where n is the\n\t * number of items being sorted.\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction bubbleSort(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t    var lessThan = (0, _comparator.comparatorToLessThan)(comparator),\n\t        arraySwap = (0, _arraySwap.arraySwapPartial)(array),\n\t        length = array.length,\n\t        i = undefined,\n\t        swapped = undefined;\n\t    // Repeat (do-while) until no item is swapped, indicating a sorted array.\n\t    do {\n\t        swapped = false;\n\t        // Step 1 to length initially, but length will be decremented til we\n\t        // reach the lower end of the array as items will \"sink\" to\n\t        // their positions and larger items will \"bubble\" to the top.\n\t        for (i = 1; i < length; i++) {\n\t            // If an item is less than it's lower position, move it down.\n\t            if (lessThan(array[i], array[i - 1])) {\n\t                arraySwap(i, i - 1);\n\t                // Indicate that we'll need another iteration as a swap occurred.\n\t                // Swap is a nice shortcut in the chance that no item needed to be moved,\n\t                // thus the array is sorted.\n\t                swapped = true;\n\t            }\n\t        }\n\t        // Decrementing our length will ignore items that have bubbled to the top.\n\t        length--;\n\t    } while (swapped);\n\t    return array;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.arraySwap = arraySwap;\n\texports.arraySwapPartial = arraySwapPartial;\n\t/**\n\t * Given an array, swap the values at position i & j\n\t * @param {Array<*>} array\n\t * @param {Number} i\n\t * @param {Number} j\n\t */\n\tfunction arraySwap(array, i, j) {\n\t    var tmp = array[j];\n\t    array[j] = array[i];\n\t    array[i] = tmp;\n\t}\n\t\n\t/**\n\t * Given an array, return a function that can swap the\n\t * values at i & j\n\t * @param {Array<*>} array\n\t * @returns {Function}\n\t */\n\tfunction arraySwapPartial(array) {\n\t    return function (i, j) {\n\t        var tmp = array[j];\n\t        array[j] = array[i];\n\t        array[i] = tmp;\n\t    };\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.comparatorToLessThan = comparatorToLessThan;\n\texports.lessThanToComparator = lessThanToComparator;\n\texports.reverse = reverse;\n\texports.lexicographicComparator = lexicographicComparator;\n\texports.numericComparator = numericComparator;\n\t/**\n\t * Converts a comparator function to a lessThan function\n\t * @param {Function} comparator\n\t * @returns {Function}\n\t */\n\tfunction comparatorToLessThan(comparator) {\n\t  return function (a, b) {\n\t    return comparator(a, b) < 0;\n\t  };\n\t}\n\t\n\t/**\n\t * Converts a less than function to a comparator function\n\t * @param {Function} lessThan\n\t * @returns {Function}\n\t */\n\tfunction lessThanToComparator(lessThan) {\n\t  return function (a, b) {\n\t    return lessThan(a, b) ? -1 : !lessThan(b, a) ? 0 : 1;\n\t  };\n\t}\n\t\n\t/**\n\t * Reverses the inputs of a bi-function\n\t * @param {Function} fn\n\t * @returns {Function}\n\t */\n\tfunction reverse(fn) {\n\t  return function (a, b) {\n\t    return fn(b, a);\n\t  };\n\t}\n\t\n\t/**\n\t * A standard lexicographic comparator that returns a number:\n\t * less that 0 denoting less than,\n\t * equal to 0 denoting equals, and\n\t * greater than 0 denoting greater than\n\t * @param {*} a\n\t * @param {*} b\n\t * @returns {Number}\n\t */\n\tfunction lexicographicComparator(a, b) {\n\t  return a < b ? -1 : a > b ? 1 : 0;\n\t}\n\t\n\t/**\n\t * A numeric comparator that returns the subtraction\n\t * of one number from another.\n\t * @param {Number} a\n\t * @param {Number} b\n\t * @returns {Number}\n\t */\n\tfunction numericComparator(a, b) {\n\t  return a - b;\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = bubbleSortOptimized;\n\t\n\tvar _arraySwap = __webpack_require__(2);\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\t/**\n\t * Optimized Bubble Sort\n\t * The bubble sort algorithm can be easily optimized by observing that the\n\t * n-th pass finds the n-th largest element and puts it into its final place.\n\t * So, the inner loop can avoid looking at the last n-1 items when running\n\t * for the n-th time\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction bubbleSortOptimized(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t    var lessThan = (0, _comparator.comparatorToLessThan)(comparator),\n\t        arraySwap = (0, _arraySwap.arraySwapPartial)(array),\n\t        n = array.length,\n\t        i = undefined,\n\t        newN = undefined;\n\t    do {\n\t        // Instead of the swapped boolean flag, we can track the last n item that bubbled to the top.\n\t        // Checking if n > 0 will suggest that some portion of the array was swapped\n\t        // but also denote that it can be ignored in the next iteration of comparisons.\n\t        newN = 0;\n\t        for (i = 1; i < n; i++) {\n\t            if (lessThan(array[i], array[i - 1])) {\n\t                arraySwap(i, i - 1);\n\t                newN = i;\n\t            }\n\t        }\n\t        n = newN;\n\t    } while (n !== 0);\n\t    return array;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = heapSort;\n\t\n\tvar _arraySwap = __webpack_require__(2);\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\t/**\n\t * Standard Heap Sort\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction heapSort(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t    var lessThan = (0, _comparator.comparatorToLessThan)(comparator),\n\t        arraySwap = (0, _arraySwap.arraySwapPartial)(array);\n\t\n\t    /**\n\t     * Heapify the array\n\t     * @param {Number} index\n\t     * @param {Number} heapSize\n\t     */\n\t    function heapify(index, heapSize) {\n\t        var largest = index,\n\t            left = 2 * index + 1,\n\t            right = left + 1;\n\t        if (left < heapSize && lessThan(array[largest], array[left])) {\n\t            largest = left;\n\t        }\n\t        if (right < heapSize && lessThan(array[largest], array[right])) {\n\t            largest = right;\n\t        }\n\t        if (largest !== index) {\n\t            arraySwap(index, largest);\n\t            heapify(largest, heapSize);\n\t        }\n\t    }\n\t    var length = array.length,\n\t        i = Math.floor(length / 2);\n\t    while (i--) {\n\t        heapify(i, length);\n\t    }\n\t    i = length;\n\t    while (i--) {\n\t        arraySwap(0, i);\n\t        heapify(0, i);\n\t    }\n\t    return array;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = insertionSort;\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\t/**\n\t * Standard Insertion Sort\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction insertionSort(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t    var lessThan = (0, _comparator.comparatorToLessThan)(comparator),\n\t        length = array.length,\n\t        value = undefined,\n\t        i = undefined,\n\t        j = undefined;\n\t    for (i = 0; i < length; i++) {\n\t        value = array[i];\n\t        for (j = i - 1; j > -1 && lessThan(value, array[j]); j--) {\n\t            array[j + 1] = array[j];\n\t        }\n\t        array[j + 1] = value;\n\t    }\n\t    return array;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = mergeSort;\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\t/**\n\t * Standard Merge Sort\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction mergeSort(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t    var lessThan = (0, _comparator.comparatorToLessThan)(comparator);\n\t    function merge(left, right) {\n\t        var result = [];\n\t        while (left.length > 0 && right.length > 0) {\n\t            result.push(lessThan(left[0], right[0]) ? left.shift() : right.shift());\n\t        }\n\t        return result.concat(left.length ? left : right);\n\t    }\n\t\n\t    function _mergeSort(array) {\n\t        if (array.length <= 1) {\n\t            return array;\n\t        }\n\t        var mid = Math.floor(array.length / 2);\n\t        return merge(_mergeSort(array.slice(0, mid)), _mergeSort(array.slice(mid)));\n\t    }\n\t\n\t    return _mergeSort(array);\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = mergeSortInplace;\n\t\n\tvar _arraySwap = __webpack_require__(2);\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\t/**\n\t * Standard Merge Sort\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction mergeSortInplace(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t    var lessThan = (0, _comparator.comparatorToLessThan)(comparator),\n\t        arraySwap = (0, _arraySwap.arraySwapPartial)(array);\n\t\n\t    function merge(min, max, mid) {\n\t        var i = undefined,\n\t            j = undefined;\n\t        for (i = min; i < mid; i++) {\n\t            if (lessThan(array[mid], array[i])) {\n\t                arraySwap(i, mid);\n\t                for (j = mid; j < max; j++) {\n\t                    if (lessThan(array[j + 1], array[j])) {\n\t                        arraySwap(j, j + 1);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    function _mergeSort(min, max) {\n\t        var range = max - min;\n\t        if (range === 0) {\n\t            return;\n\t        } else if (range === 1) {\n\t            if (lessThan(array[max], array[min])) {\n\t                arraySwap(min, max);\n\t            }\n\t        } else {\n\t            var mid = Math.floor((min + max) / 2);\n\t            _mergeSort(min, mid);\n\t            _mergeSort(++mid, max);\n\t            merge(min, max, mid);\n\t        }\n\t    }\n\t    _mergeSort(0, array.length - 1);\n\t    return array;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = dartDualPivotQuicksort;\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\t/**\n\t * Simple Dual Pivot quicksort\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction dartDualPivotQuicksort(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t\n\t    var INSERTION_SORT_THRESHOLD = 32;\n\t\n\t    function sort(left, right) {\n\t        if (right - left < INSERTION_SORT_THRESHOLD) {\n\t            insertionSort(left, right);\n\t        } else {\n\t            quicksort(left, right);\n\t        }\n\t    }\n\t\n\t    function insertionSort(left, right) {\n\t        for (var i = left + 1; i <= right; i++) {\n\t            var el = array[i],\n\t                j = i;\n\t            while (j > left && comparator(array[j - 1], el) > 0) {\n\t                array[j] = array[j - 1];\n\t                j--;\n\t            }\n\t            array[j] = el;\n\t        }\n\t    }\n\t\n\t    function quicksort(left, right) {\n\t\n\t        var sixth = (right - left + 1) / 6 | 0,\n\t            index1 = left + sixth,\n\t            index5 = right - sixth,\n\t            index3 = left + right >>> 1,\n\t            index2 = index3 - sixth,\n\t            index4 = index3 + sixth;\n\t\n\t        var el1 = array[index1],\n\t            el2 = array[index2],\n\t            el3 = array[index3],\n\t            el4 = array[index4],\n\t            el5 = array[index5];\n\t\n\t        var t = undefined;\n\t\n\t        if (comparator(el1, el2) > 0) {\n\t            t = el1;\n\t            el1 = el2;\n\t            el2 = t;\n\t        }\n\t        if (comparator(el4, el5) > 0) {\n\t            t = el4;\n\t            el4 = el5;\n\t            el5 = t;\n\t        }\n\t        if (comparator(el1, el3) > 0) {\n\t            t = el1;\n\t            el1 = el3;\n\t            el3 = t;\n\t        }\n\t        if (comparator(el2, el3) > 0) {\n\t            t = el2;\n\t            el2 = el3;\n\t            el3 = t;\n\t        }\n\t        if (comparator(el1, el4) > 0) {\n\t            t = el1;\n\t            el1 = el4;\n\t            el4 = t;\n\t        }\n\t        if (comparator(el3, el4) > 0) {\n\t            t = el3;\n\t            el3 = el4;\n\t            el4 = t;\n\t        }\n\t        if (comparator(el2, el5) > 0) {\n\t            t = el2;\n\t            el2 = el5;\n\t            el5 = t;\n\t        }\n\t        if (comparator(el2, el3) > 0) {\n\t            t = el2;\n\t            el2 = el3;\n\t            el3 = t;\n\t        }\n\t        if (comparator(el4, el5) > 0) {\n\t            t = el4;\n\t            el4 = el5;\n\t            el5 = t;\n\t        }\n\t\n\t        var pivot1 = el2,\n\t            pivot2 = el4;\n\t\n\t        array[index1] = el1;\n\t        array[index3] = el3;\n\t        array[index5] = el5;\n\t\n\t        array[index2] = array[left];\n\t        array[index4] = array[right];\n\t\n\t        var less = left + 1,\n\t            great = right - 1;\n\t\n\t        var pivotsAreEqual = comparator(pivot1, pivot2) === 0;\n\t        if (pivotsAreEqual) {\n\t            var pivot = pivot1;\n\t            for (var k = less; k <= great; ++k) {\n\t                var ak = array[k],\n\t                    comp = comparator(ak, pivot);\n\t                if (comp < 0) {\n\t                    if (k !== less) {\n\t                        array[k] = array[less];\n\t                        array[less] = ak;\n\t                    }\n\t                    less++;\n\t                } else if (comp > 0) {\n\t                    while (true) {\n\t                        comp = comparator(array[great], pivot);\n\t                        if (comp > 0) {\n\t                            great--;\n\t                        } else if (comp < 0) {\n\t                            array[k] = array[less];\n\t                            array[less++] = array[great];\n\t                            array[great--] = ak;\n\t                            break;\n\t                        } else {\n\t                            array[k] = array[great];\n\t                            array[great--] = ak;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else {\n\t            for (var k = less; k <= great; k++) {\n\t                var ak = array[k],\n\t                    compPivot1 = comparator(ak, pivot1);\n\t                if (compPivot1 < 0) {\n\t                    if (k !== less) {\n\t                        array[k] = array[less];\n\t                        array[less] = ak;\n\t                    }\n\t                    less++;\n\t                } else {\n\t                    var compPivot2 = comparator(ak, pivot2);\n\t                    if (compPivot2 > 0) {\n\t                        while (true) {\n\t                            var comp = comparator(array[great], pivot2);\n\t                            if (comp > 0) {\n\t                                great--;\n\t                                if (great < k) {\n\t                                    break;\n\t                                }\n\t                            } else {\n\t                                comp = comparator(array[great], pivot1);\n\t                                if (comp < 0) {\n\t                                    array[k] = array[less];\n\t                                    array[less++] = array[great];\n\t                                    array[great--] = ak;\n\t                                } else {\n\t                                    array[k] = array[great];\n\t                                    array[great--] = ak;\n\t                                }\n\t                                break;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        array[left] = array[less - 1];\n\t        array[less - 1] = pivot1;\n\t        array[right] = array[great + 1];\n\t        array[great + 1] = pivot2;\n\t\n\t        sort(left, less - 2);\n\t        sort(great + 2, right);\n\t\n\t        if (pivotsAreEqual) {\n\t            return;\n\t        }\n\t\n\t        if (less < index1 && great > index5) {\n\t            while (comparator(array[less], pivot1) === 0) {\n\t                less++;\n\t            }\n\t            while (comparator(array[great], pivot2) === 0) {\n\t                great--;\n\t            }\n\t\n\t            for (var k = less; k <= great; k++) {\n\t                var ak = array[k],\n\t                    compPivot1 = comparator(ak, pivot1);\n\t                if (compPivot1 === 0) {\n\t                    if (k !== less) {\n\t                        array[k] = array[less];\n\t                        array[less] = ak;\n\t                    }\n\t                    less++;\n\t                } else {\n\t                    var compPivot2 = comparator(ak, pivot2);\n\t                    if (compPivot2 === 0) {\n\t                        while (true) {\n\t                            var comp = comparator(array[great], pivot2);\n\t                            if (comp === 0) {\n\t                                great--;\n\t                                if (great < k) {\n\t                                    break;\n\t                                }\n\t                            } else {\n\t                                comp = comparator(array[great], pivot1);\n\t                                if (comp < 0) {\n\t                                    array[k] = array[less];\n\t                                    array[less++] = array[great];\n\t                                    array[great--] = ak;\n\t                                } else {\n\t                                    array[k] = array[great];\n\t                                    array[great--] = ak;\n\t                                }\n\t                                break;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        sort(less, great);\n\t    }\n\t\n\t    sort(0, array.length - 1);\n\t    return array;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = dartDualPivotQuicksort2;\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\t/**\n\t * Simple Dual Pivot quicksort\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction dartDualPivotQuicksort2(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t\n\t    var INSERTION_SORT_THRESHOLD = 32;\n\t\n\t    function sort(left, right) {\n\t        if (right - left < INSERTION_SORT_THRESHOLD) {\n\t            insertionSort(left, right);\n\t        } else {\n\t            quicksort(left, right);\n\t        }\n\t    }\n\t\n\t    function insertionSort(left, right) {\n\t        for (var i = left + 1; i <= right; i++) {\n\t            var el = array[i],\n\t                j = i;\n\t            while (j > left && comparator(array[j - 1], el) > 0) {\n\t                array[j] = array[j - 1];\n\t                j--;\n\t            }\n\t            array[j] = el;\n\t        }\n\t    }\n\t\n\t    function quicksort(left, right) {\n\t\n\t        var sixth = (right - left + 1) / 6 | 0,\n\t            index1 = left + sixth,\n\t            index5 = right - sixth,\n\t            index3 = left + right >>> 1,\n\t            index2 = index3 - sixth,\n\t            index4 = index3 + sixth;\n\t\n\t        var el1 = array[index1],\n\t            el2 = array[index2],\n\t            el3 = array[index3],\n\t            el4 = array[index4],\n\t            el5 = array[index5];\n\t\n\t        var t = undefined;\n\t\n\t        if (comparator(el1, el2) > 0) {\n\t            t = el1;\n\t            el1 = el2;\n\t            el2 = t;\n\t        }\n\t        if (comparator(el4, el5) > 0) {\n\t            t = el4;\n\t            el4 = el5;\n\t            el5 = t;\n\t        }\n\t        if (comparator(el1, el3) > 0) {\n\t            t = el1;\n\t            el1 = el3;\n\t            el3 = t;\n\t        }\n\t        if (comparator(el2, el3) > 0) {\n\t            t = el2;\n\t            el2 = el3;\n\t            el3 = t;\n\t        }\n\t        if (comparator(el1, el4) > 0) {\n\t            t = el1;\n\t            el1 = el4;\n\t            el4 = t;\n\t        }\n\t        if (comparator(el3, el4) > 0) {\n\t            t = el3;\n\t            el3 = el4;\n\t            el4 = t;\n\t        }\n\t        if (comparator(el2, el5) > 0) {\n\t            t = el2;\n\t            el2 = el5;\n\t            el5 = t;\n\t        }\n\t        if (comparator(el2, el3) > 0) {\n\t            t = el2;\n\t            el2 = el3;\n\t            el3 = t;\n\t        }\n\t        if (comparator(el4, el5) > 0) {\n\t            t = el4;\n\t            el4 = el5;\n\t            el5 = t;\n\t        }\n\t\n\t        var pivot1 = el2,\n\t            pivot2 = el4;\n\t\n\t        array[index1] = el1;\n\t        array[index3] = el3;\n\t        array[index5] = el5;\n\t\n\t        array[index2] = array[left];\n\t        array[index4] = array[right];\n\t\n\t        var less = left + 1,\n\t            great = right - 1;\n\t\n\t        var pivotsDiffer = comparator(pivot1, pivot2) !== 0;\n\t        if (pivotsDiffer) {\n\t            outer1: for (var k = less; k <= great; k++) {\n\t                var ak = array[k];\n\t                if (comparator(ak, pivot1) < 0) {\n\t                    if (k !== less) {\n\t                        array[k] = array[less];\n\t                        array[less] = ak;\n\t                    }\n\t                    less++;\n\t                } else if (comparator(ak, pivot2) > 0) {\n\t                    while (comparator(array[great], pivot2) > 0) {\n\t                        if (great-- === k) {\n\t                            break outer1;\n\t                        }\n\t                    }\n\t                    if (comparator(array[great], pivot1) < 0) {\n\t                        array[k] = array[less];\n\t                        array[less++] = array[great];\n\t                        array[great--] = ak;\n\t                    } else {\n\t                        array[k] = array[great];\n\t                        array[great--] = ak;\n\t                    }\n\t                }\n\t            }\n\t        } else {\n\t            for (var k = less; k <= great; ++k) {\n\t                var ak = array[k],\n\t                    comp = comparator(ak, pivot1);\n\t                if (comp < 0) {\n\t                    if (k !== less) {\n\t                        array[k] = array[less];\n\t                        array[less] = ak;\n\t                    }\n\t                    less++;\n\t                } else if (comp > 0) {\n\t                    while (comparator(array[great], pivot1) > 0) {\n\t                        great--;\n\t                    }\n\t                    if (comparator(array[great], pivot1) < 0) {\n\t                        array[k] = array[less];\n\t                        array[less++] = array[great];\n\t                        array[great--] = ak;\n\t                    } else {\n\t                        array[k] = array[great];\n\t                        array[great--] = ak;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        array[left] = array[less - 1];\n\t        array[less - 1] = pivot1;\n\t        array[right] = array[great + 1];\n\t        array[great + 1] = pivot2;\n\t\n\t        sort(left, less - 2);\n\t        sort(great + 2, right);\n\t\n\t        if (!pivotsDiffer) {\n\t            return;\n\t        }\n\t\n\t        if (less < index1 && great > index5) {\n\t            while (comparator(array[less], pivot1) === 0) {\n\t                less++;\n\t            }\n\t            while (comparator(array[great], pivot2) === 0) {\n\t                great--;\n\t            }\n\t\n\t            outer2: for (var k = less; k <= great; k++) {\n\t                var ak = array[k];\n\t                if (comparator(ak, pivot2) === 0) {\n\t                    while (comparator(array[great], pivot2) === 0) {\n\t                        if (great-- === k) {\n\t                            break outer2;\n\t                        }\n\t                    }\n\t                    if (comparator(array[great], pivot1) === 0) {\n\t                        array[k] = array[less];\n\t                        array[less] = pivot1;\n\t                    } else {\n\t                        array[k] = array[great];\n\t                    }\n\t                    array[great--] = pivot2;\n\t                } else if (comparator(ak, pivot1) === 0) {\n\t                    array[k] = array[less];\n\t                    array[less++] = pivot1;\n\t                }\n\t            }\n\t        }\n\t        sort(less, great);\n\t    }\n\t    sort(0, array.length - 1);\n\t    return array;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = dualPivotQuicksort;\n\t\n\tvar _arraySwap = __webpack_require__(2);\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\t/**\n\t * Standard quicksort\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction dualPivotQuicksort(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t    var lessThan = (0, _comparator.comparatorToLessThan)(comparator),\n\t        arraySwap = (0, _arraySwap.arraySwapPartial)(array);\n\t    function quicksort(left, right) {\n\t        if (left < right) {\n\t            if (lessThan(array[right], array[left])) {\n\t                arraySwap(left, right);\n\t            }\n\t            var pivot1 = array[left],\n\t                pivot2 = array[right],\n\t                l = left + 1,\n\t                g = right - 1,\n\t                k = l;\n\t            for (k; k <= g; k++) {\n\t                if (lessThan(array[k], pivot1)) {\n\t                    arraySwap(k, l++);\n\t                } else if (!lessThan(array[k], pivot2)) {\n\t                    while (lessThan(pivot2, array[g]) && k < g) {\n\t                        --g;\n\t                    }\n\t                    arraySwap(k, g--);\n\t                    if (lessThan(array[k], pivot1)) {\n\t                        arraySwap(k, l++);\n\t                    }\n\t                }\n\t            }\n\t            arraySwap(left, --l);\n\t            arraySwap(right, ++g);\n\t            quicksort(left, l - 1);\n\t            quicksort(l + 1, g - 1);\n\t            quicksort(g + 1, right);\n\t        }\n\t    }\n\t    quicksort(0, array.length - 1);\n\t    return array;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = quicksort;\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\tvar concat = Array.prototype.concat;\n\t\n\t/**\n\t * Standard quicksort\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction quicksort(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t    var lessThan = (0, _comparator.comparatorToLessThan)(comparator);\n\t    function _quicksort(array) {\n\t        if (array.length <= 1) {\n\t            return array;\n\t        }\n\t        var left = [],\n\t            right = [],\n\t            index = 0,\n\t            length = array.length,\n\t            pivot = array[0],\n\t            value = undefined;\n\t\n\t        while (++index < length) {\n\t            value = array[index];\n\t            if (lessThan(value, pivot)) {\n\t                left.push(value);\n\t            } else {\n\t                right.push(value);\n\t            }\n\t        }\n\t        return concat.call(_quicksort(left), pivot, _quicksort(right));\n\t    }\n\t    return _quicksort(array);\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = quicksortFunctional;\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\tvar concat = Array.prototype.concat;\n\t\n\t/**\n\t * A functional programming implementation of quicksort.\n\t * http://rosettacode.org/wiki/Sorting_algorithms/Quicksort#JavaScript\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction quicksortFunctional(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t    function quicksort(array) {\n\t        if (array.length <= 1) {\n\t            return array;\n\t        }\n\t        var pivot = array[Math.floor(array.length / 2)];\n\t        return concat.call(quicksort(array.filter(function (x) {\n\t            return comparator(x, pivot) < 0;\n\t        })), array.filter(function (x) {\n\t            return comparator(x, pivot) === 0;\n\t        }), quicksort(array.filter(function (x) {\n\t            return comparator(x, pivot) > 0;\n\t        })));\n\t    }\n\t    return quicksort(array);\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = quicksortInplace;\n\t\n\tvar _arraySwap = __webpack_require__(2);\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\t/**\n\t * An in-place quicksort\n\t * http://rosettacode.org/wiki/Sorting_algorithms/Quicksort#JavaScript\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction quicksortInplace(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t    var lessThan = (0, _comparator.comparatorToLessThan)(comparator),\n\t        arraySwap = (0, _arraySwap.arraySwapPartial)(array);\n\t    function quicksort(left, right) {\n\t        if (left < right) {\n\t            var pivot = array[left + right >> 1],\n\t                i = left,\n\t                j = right;\n\t            do {\n\t                while (lessThan(array[i], pivot)) {\n\t                    i++;\n\t                }\n\t                while (lessThan(pivot, array[j])) {\n\t                    j--;\n\t                }\n\t                if (i <= j) {\n\t                    arraySwap(i++, j--);\n\t                }\n\t            } while (i <= j);\n\t            quicksort(left, j);\n\t            quicksort(i, right);\n\t        }\n\t    }\n\t    quicksort(0, array.length - 1);\n\t    return array;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = selectionSort;\n\t\n\tvar _arraySwap = __webpack_require__(2);\n\t\n\tvar _comparator = __webpack_require__(3);\n\t\n\t/**\n\t * Standard Selection Sort\n\t * @param {Array<*>} array\n\t * @param {Function} [comparator=lexicographicComparator]\n\t * @returns {Array<*>}\n\t */\n\tfunction selectionSort(array) {\n\t    var comparator = arguments.length <= 1 || arguments[1] === undefined ? _comparator.lexicographicComparator : arguments[1];\n\t\n\t    var lessThan = (0, _comparator.comparatorToLessThan)(comparator),\n\t        arraySwap = (0, _arraySwap.arraySwapPartial)(array),\n\t        length = array.length,\n\t        min = undefined,\n\t        i = undefined,\n\t        j = undefined;\n\t\n\t    for (i = 0; i < length; i++) {\n\t        min = i;\n\t        for (j = i + 1; j < length; j++) {\n\t            if (lessThan(array[j], array[min])) {\n\t                min = j;\n\t            }\n\t        }\n\t        if (i !== min) {\n\t            arraySwap(i, min);\n\t        }\n\t    }\n\t    return array;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** sort.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4b2e6b0f4425e7f5025a\n **/","import {arraySwapPartial} from '../util/arraySwap';\nimport {comparatorToLessThan, lexicographicComparator} from '../util/comparator';\n\n/**\n * Standard Bubble Sort\n * Sometimes referred to as sinking sort, is a simple sorting algorithm that\n * repeatedly steps through the list to be sorted, compares each pair of adjacent\n * items and swaps them if they are in the wrong order. The pass through the list\n * is repeated until no swaps are needed, which indicates that the list is sorted.\n *\n * Bubble sort has worst-case and average complexity both О(n^2), where n is the\n * number of items being sorted.\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function bubbleSort (array, comparator = lexicographicComparator) {\n    let lessThan = comparatorToLessThan(comparator),\n        arraySwap = arraySwapPartial(array),\n        length = array.length,\n        i,\n        swapped;\n    // Repeat (do-while) until no item is swapped, indicating a sorted array.\n    do {\n        swapped = false;\n        // Step 1 to length initially, but length will be decremented til we\n        // reach the lower end of the array as items will \"sink\" to\n        // their positions and larger items will \"bubble\" to the top.\n        for (i = 1; i < length; i++) {\n            // If an item is less than it's lower position, move it down.\n            if (lessThan(array[i], array[i - 1])) {\n                arraySwap(i, i - 1);\n                // Indicate that we'll need another iteration as a swap occurred.\n                // Swap is a nice shortcut in the chance that no item needed to be moved,\n                // thus the array is sorted.\n                swapped = true;\n            }\n        }\n        // Decrementing our length will ignore items that have bubbled to the top.\n        length--;\n    } while (swapped);\n    return array;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/bubbleSort/bubbleSort.js\n **/","/**\n * Given an array, swap the values at position i & j\n * @param {Array<*>} array\n * @param {Number} i\n * @param {Number} j\n */\nexport function arraySwap (array, i, j) {\n    let tmp = array[j];\n    array[j] = array[i];\n    array[i] = tmp;\n}\n\n/**\n * Given an array, return a function that can swap the\n * values at i & j\n * @param {Array<*>} array\n * @returns {Function}\n */\nexport function arraySwapPartial (array) {\n    return (i, j) => {\n        let tmp = array[j];\n        array[j] = array[i];\n        array[i] = tmp;\n    };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/util/arraySwap.js\n **/","/**\n * Converts a comparator function to a lessThan function\n * @param {Function} comparator\n * @returns {Function}\n */\nexport function comparatorToLessThan (comparator) {\n    return (a, b) => comparator(a, b) < 0;\n}\n\n/**\n * Converts a less than function to a comparator function\n * @param {Function} lessThan\n * @returns {Function}\n */\nexport function lessThanToComparator (lessThan) {\n    return (a, b) => lessThan(a, b) ? -1 : (!lessThan(b, a) ? 0 : 1);\n}\n\n/**\n * Reverses the inputs of a bi-function\n * @param {Function} fn\n * @returns {Function}\n */\nexport function reverse (fn) {\n    return (a, b) => fn(b, a);\n}\n\n/**\n * A standard lexicographic comparator that returns a number:\n * less that 0 denoting less than,\n * equal to 0 denoting equals, and\n * greater than 0 denoting greater than\n * @param {*} a\n * @param {*} b\n * @returns {Number}\n */\nexport function lexicographicComparator (a, b) {\n    return a < b ? -1 : (a > b ? 1 : 0);\n}\n\n/**\n * A numeric comparator that returns the subtraction\n * of one number from another.\n * @param {Number} a\n * @param {Number} b\n * @returns {Number}\n */\nexport function numericComparator (a, b) {\n    return a - b;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/util/comparator.js\n **/","import {arraySwapPartial} from '../util/arraySwap';\nimport {comparatorToLessThan, lexicographicComparator} from '../util/comparator';\n\n/**\n * Optimized Bubble Sort\n * The bubble sort algorithm can be easily optimized by observing that the\n * n-th pass finds the n-th largest element and puts it into its final place.\n * So, the inner loop can avoid looking at the last n-1 items when running\n * for the n-th time\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function bubbleSortOptimized (array, comparator = lexicographicComparator) {\n    let lessThan = comparatorToLessThan(comparator),\n        arraySwap = arraySwapPartial(array),\n        n = array.length,\n        i,\n        newN;\n    do {\n        // Instead of the swapped boolean flag, we can track the last n item that bubbled to the top.\n        // Checking if n > 0 will suggest that some portion of the array was swapped\n        // but also denote that it can be ignored in the next iteration of comparisons.\n        newN = 0;\n        for (i = 1; i < n; i++) {\n            if (lessThan(array[i], array[i - 1])) {\n                arraySwap(i, i - 1);\n                newN = i;\n            }\n        }\n        n = newN;\n    } while (n !== 0);\n    return array;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/bubbleSort/bubbleSortOptimized.js\n **/","import {arraySwapPartial} from '../util/arraySwap';\nimport {comparatorToLessThan, lexicographicComparator} from '../util/comparator';\n\n/**\n * Standard Heap Sort\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function heapSort (array, comparator = lexicographicComparator) {\n    let lessThan = comparatorToLessThan(comparator),\n        arraySwap = arraySwapPartial(array);\n\n    /**\n     * Heapify the array\n     * @param {Number} index\n     * @param {Number} heapSize\n     */\n    function heapify (index, heapSize) {\n        let largest = index,\n            left = 2 * index + 1,\n            right = left + 1;\n        if (left < heapSize && lessThan(array[largest], array[left])) {\n            largest = left;\n        }\n        if (right < heapSize && lessThan(array[largest], array[right])) {\n            largest = right;\n        }\n        if (largest !== index) {\n            arraySwap(index, largest);\n            heapify(largest, heapSize);\n        }\n    }\n    let length = array.length,\n        i = Math.floor(length / 2);\n    while (i--) {\n        heapify(i, length);\n    }\n    i = length;\n    while (i--) {\n        arraySwap(0, i);\n        heapify(0, i);\n    }\n    return array;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/heapSort/heapSort.js\n **/","import {comparatorToLessThan, lexicographicComparator} from '../util/comparator';\n\n/**\n * Standard Insertion Sort\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function insertionSort (array, comparator = lexicographicComparator) {\n    let lessThan = comparatorToLessThan(comparator),\n        length = array.length,\n        value,\n        i,\n        j;\n    for (i = 0; i < length; i++) {\n        value = array[i];\n        for (j = i - 1; j > -1 && lessThan(value, array[j]); j--) {\n            array[j + 1] = array[j];\n        }\n        array[j + 1] = value;\n    }\n    return array;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/insertionSort/insertionSort.js\n **/","import {comparatorToLessThan, lexicographicComparator} from '../util/comparator';\n\n/**\n * Standard Merge Sort\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function mergeSort (array, comparator = lexicographicComparator) {\n    let lessThan = comparatorToLessThan(comparator);\n    function merge (left, right) {\n        let result = [];\n        while (left.length > 0 && right.length > 0) {\n            result.push(lessThan(left[0], right[0]) ? left.shift() : right.shift());\n        }\n        return result.concat(left.length ? left : right);\n    }\n\n    function _mergeSort (array) {\n        if (array.length <= 1) {\n            return array;\n        }\n        let mid = Math.floor(array.length / 2);\n        return merge(_mergeSort(array.slice(0, mid)), _mergeSort(array.slice(mid)));\n    }\n\n    return _mergeSort(array);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mergeSort/mergeSort.js\n **/","import {arraySwapPartial} from '../util/arraySwap';\nimport {comparatorToLessThan, lexicographicComparator} from '../util/comparator';\n\n/**\n * Standard Merge Sort\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function mergeSortInplace (array, comparator = lexicographicComparator) {\n    let lessThan = comparatorToLessThan(comparator),\n        arraySwap = arraySwapPartial(array);\n\n    function merge (min, max, mid) {\n        let i,\n            j;\n        for (i = min; i < mid; i++) {\n            if (lessThan(array[mid], array[i])) {\n                arraySwap(i, mid);\n                for (j = mid; j < max; j++) {\n                    if (lessThan(array[j + 1], array[j])) {\n                        arraySwap(j, j + 1);\n                    }\n                }\n            }\n        }\n    }\n\n    function _mergeSort (min, max) {\n        let range = max - min;\n        if (range === 0) {\n            return;\n        } else if (range === 1) {\n            if (lessThan(array[max], array[min])) {\n                arraySwap(min, max);\n            }\n        } else {\n            let mid = Math.floor((min + max) / 2);\n            _mergeSort(min, mid);\n            _mergeSort(++mid, max);\n            merge(min, max, mid);\n        }\n    }\n    _mergeSort(0, array.length - 1);\n    return array;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mergeSort/mergeSortInplace.js\n **/","import {lexicographicComparator} from '../util/comparator';\n\n/**\n * Simple Dual Pivot quicksort\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function dartDualPivotQuicksort (array, comparator = lexicographicComparator) {\n\n    const INSERTION_SORT_THRESHOLD = 32;\n\n    function sort (left, right) {\n        if ((right - left) < INSERTION_SORT_THRESHOLD) {\n            insertionSort(left, right);\n        } else {\n            quicksort(left, right);\n        }\n    }\n\n    function insertionSort (left, right) {\n        for (let i = left + 1; i <= right; i++) {\n            let el = array[i],\n                j = i;\n            while ((j > left) && (comparator(array[j - 1], el) > 0)) {\n                array[j] = array[j - 1];\n                j--;\n            }\n            array[j] = el;\n        }\n    }\n\n    function quicksort (left, right) {\n\n        let sixth = (right - left + 1) / 6 | 0,\n            index1 = left + sixth,\n            index5 = right - sixth,\n            index3 = (left + right) >>> 1,\n            index2 = index3 - sixth,\n            index4 = index3 + sixth;\n\n        let el1 = array[index1],\n            el2 = array[index2],\n            el3 = array[index3],\n            el4 = array[index4],\n            el5 = array[index5];\n\n        let t;\n\n        if (comparator(el1, el2) > 0) {\n            t = el1;\n            el1 = el2;\n            el2 = t;\n        }\n        if (comparator(el4, el5) > 0) {\n            t = el4;\n            el4 = el5;\n            el5 = t;\n        }\n        if (comparator(el1, el3) > 0) {\n            t = el1;\n            el1 = el3;\n            el3 = t;\n        }\n        if (comparator(el2, el3) > 0) {\n            t = el2;\n            el2 = el3;\n            el3 = t;\n        }\n        if (comparator(el1, el4) > 0) {\n            t = el1;\n            el1 = el4;\n            el4 = t;\n        }\n        if (comparator(el3, el4) > 0) {\n            t = el3;\n            el3 = el4;\n            el4 = t;\n        }\n        if (comparator(el2, el5) > 0) {\n            t = el2;\n            el2 = el5;\n            el5 = t;\n        }\n        if (comparator(el2, el3) > 0) {\n            t = el2;\n            el2 = el3;\n            el3 = t;\n        }\n        if (comparator(el4, el5) > 0) {\n            t = el4;\n            el4 = el5;\n            el5 = t;\n        }\n\n        let pivot1 = el2,\n            pivot2 = el4;\n\n        array[index1] = el1;\n        array[index3] = el3;\n        array[index5] = el5;\n\n        array[index2] = array[left];\n        array[index4] = array[right];\n\n        let less = left + 1,\n            great = right - 1;\n\n        let pivotsAreEqual = (comparator(pivot1, pivot2) === 0);\n        if (pivotsAreEqual) {\n            let pivot = pivot1;\n            for (let k = less; k <= great; ++k) {\n                let ak = array[k],\n                    comp = comparator(ak, pivot);\n                if (comp < 0) {\n                    if (k !== less) {\n                        array[k] = array[less];\n                        array[less] = ak;\n                    }\n                    less++;\n                } else if (comp > 0) {\n                    while (true) {\n                        comp = comparator(array[great], pivot);\n                        if (comp > 0) {\n                            great--;\n                        } else if (comp < 0) {\n                            array[k] = array[less];\n                            array[less++] = array[great];\n                            array[great--] = ak;\n                            break;\n                        } else {\n                            array[k] = array[great];\n                            array[great--] = ak;\n                            break;\n                        }\n                    }\n                }\n            }\n        } else {\n            for (let k = less; k <= great; k++) {\n                let ak = array[k],\n                    compPivot1 = comparator(ak, pivot1);\n                if (compPivot1 < 0) {\n                    if (k !== less) {\n                        array[k] = array[less];\n                        array[less] = ak;\n                    }\n                    less++;\n                } else {\n                    let compPivot2 = comparator(ak, pivot2);\n                    if (compPivot2 > 0) {\n                        while (true) {\n                            let comp = comparator(array[great], pivot2);\n                            if (comp > 0) {\n                                great--;\n                                if (great < k) {\n                                    break;\n                                }\n                            } else {\n                                comp = comparator(array[great], pivot1);\n                                if (comp < 0) {\n                                    array[k] = array[less];\n                                    array[less++] = array[great];\n                                    array[great--] = ak;\n                                } else {\n                                    array[k] = array[great];\n                                    array[great--] = ak;\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        array[left] = array[less - 1];\n        array[less - 1] = pivot1;\n        array[right] = array[great + 1];\n        array[great + 1] = pivot2;\n\n        sort(left, less - 2);\n        sort(great + 2, right);\n\n        if (pivotsAreEqual) {\n            return;\n        }\n\n        if (less < index1 && great > index5) {\n            while (comparator(array[less], pivot1) === 0) {\n                less++;\n            }\n            while (comparator(array[great], pivot2) === 0) {\n                great--;\n            }\n\n            for (let k = less; k <= great; k++) {\n                let ak = array[k],\n                    compPivot1 = comparator(ak, pivot1);\n                if (compPivot1 === 0) {\n                    if (k !== less) {\n                        array[k] = array[less];\n                        array[less] = ak;\n                    }\n                    less++;\n                } else {\n                    let compPivot2 = comparator(ak, pivot2);\n                    if (compPivot2 === 0) {\n                        while (true) {\n                            let comp = comparator(array[great], pivot2);\n                            if (comp === 0) {\n                                great--;\n                                if (great < k) {\n                                    break;\n                                }\n                            } else {\n                                comp = comparator(array[great], pivot1);\n                                if (comp < 0) {\n                                    array[k] = array[less];\n                                    array[less++] = array[great];\n                                    array[great--] = ak;\n                                } else {\n                                    array[k] = array[great];\n                                    array[great--] = ak;\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        sort(less, great);\n    }\n\n    sort(0, array.length - 1);\n    return array;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/quicksort/sortingNetworkDualPivotQuicksort.js\n **/","import {lexicographicComparator} from '../util/comparator';\n\n/**\n * Simple Dual Pivot quicksort\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function dartDualPivotQuicksort2 (array, comparator = lexicographicComparator) {\n\n    const INSERTION_SORT_THRESHOLD = 32;\n\n    function sort (left, right) {\n        if ((right - left) < INSERTION_SORT_THRESHOLD) {\n            insertionSort(left, right);\n        } else {\n            quicksort(left, right);\n        }\n    }\n\n    function insertionSort (left, right) {\n        for (let i = left + 1; i <= right; i++) {\n            let el = array[i],\n                j = i;\n            while ((j > left) && (comparator(array[j - 1], el) > 0)) {\n                array[j] = array[j - 1];\n                j--;\n            }\n            array[j] = el;\n        }\n    }\n\n    function quicksort (left, right) {\n\n        let sixth = (right - left + 1) / 6 | 0,\n            index1 = left + sixth,\n            index5 = right - sixth,\n            index3 = (left + right) >>> 1,\n            index2 = index3 - sixth,\n            index4 = index3 + sixth;\n\n        let el1 = array[index1],\n            el2 = array[index2],\n            el3 = array[index3],\n            el4 = array[index4],\n            el5 = array[index5];\n\n        let t;\n\n        if (comparator(el1, el2) > 0) {\n            t = el1;\n            el1 = el2;\n            el2 = t;\n        }\n        if (comparator(el4, el5) > 0) {\n            t = el4;\n            el4 = el5;\n            el5 = t;\n        }\n        if (comparator(el1, el3) > 0) {\n            t = el1;\n            el1 = el3;\n            el3 = t;\n        }\n        if (comparator(el2, el3) > 0) {\n            t = el2;\n            el2 = el3;\n            el3 = t;\n        }\n        if (comparator(el1, el4) > 0) {\n            t = el1;\n            el1 = el4;\n            el4 = t;\n        }\n        if (comparator(el3, el4) > 0) {\n            t = el3;\n            el3 = el4;\n            el4 = t;\n        }\n        if (comparator(el2, el5) > 0) {\n            t = el2;\n            el2 = el5;\n            el5 = t;\n        }\n        if (comparator(el2, el3) > 0) {\n            t = el2;\n            el2 = el3;\n            el3 = t;\n        }\n        if (comparator(el4, el5) > 0) {\n            t = el4;\n            el4 = el5;\n            el5 = t;\n        }\n\n        let pivot1 = el2,\n            pivot2 = el4;\n\n        array[index1] = el1;\n        array[index3] = el3;\n        array[index5] = el5;\n\n        array[index2] = array[left];\n        array[index4] = array[right];\n\n        let less = left + 1,\n            great = right - 1;\n\n        let pivotsDiffer = (comparator(pivot1, pivot2) !== 0);\n        if (pivotsDiffer) {\n            outer1:\n            for (let k = less; k <= great; k++) {\n                let ak = array[k];\n                if (comparator(ak, pivot1) < 0) {\n                    if (k !== less) {\n                        array[k] = array[less];\n                        array[less] = ak;\n                    }\n                    less++;\n                } else if (comparator(ak, pivot2) > 0) {\n                    while (comparator(array[great], pivot2) > 0) {\n                        if (great-- === k) {\n                            break outer1;\n                        }\n                    }\n                    if (comparator(array[great], pivot1) < 0) {\n                        array[k] = array[less];\n                        array[less++] = array[great];\n                        array[great--] = ak;\n                    } else {\n                        array[k] = array[great];\n                        array[great--] = ak;\n                    }\n                }\n            }\n        } else {\n            for (let k = less; k <= great; ++k) {\n                let ak = array[k],\n                    comp = comparator(ak, pivot1);\n                if (comp < 0) {\n                    if (k !== less) {\n                        array[k] = array[less];\n                        array[less] = ak;\n                    }\n                    less++;\n                } else if (comp > 0) {\n                    while (comparator(array[great], pivot1) > 0) {\n                        great--;\n                    }\n                    if (comparator(array[great], pivot1) < 0) {\n                        array[k] = array[less];\n                        array[less++] = array[great];\n                        array[great--] = ak;\n                    } else {\n                        array[k] = array[great];\n                        array[great--] = ak;\n                    }\n                }\n            }\n        }\n\n        array[left] = array[less - 1];\n        array[less - 1] = pivot1;\n        array[right] = array[great + 1];\n        array[great + 1] = pivot2;\n\n        sort(left, less - 2);\n        sort(great + 2, right);\n\n        if (!pivotsDiffer) {\n            return;\n        }\n\n        if (less < index1 && great > index5) {\n            while (comparator(array[less], pivot1) === 0) {\n                less++;\n            }\n            while (comparator(array[great], pivot2) === 0) {\n                great--;\n            }\n\n            outer2:\n            for (let k = less; k <= great; k++) {\n                let ak = array[k];\n                if (comparator(ak, pivot2) === 0) {\n                    while (comparator(array[great], pivot2) === 0) {\n                        if (great-- === k) {\n                            break outer2;\n                        }\n                    }\n                    if (comparator(array[great], pivot1) === 0) {\n                        array[k] = array[less];\n                        array[less] = pivot1;\n                    } else {\n                        array[k] = array[great];\n                    }\n                    array[great--] = pivot2;\n                } else if (comparator(ak, pivot1) === 0) {\n                    array[k] = array[less];\n                    array[less++] = pivot1;\n                }\n            }\n        }\n        sort(less, great);\n    }\n    sort(0, array.length - 1);\n    return array;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/quicksort/sortingNetworkDualPivotQuicksort2.js\n **/","import {arraySwapPartial} from '../util/arraySwap';\nimport {comparatorToLessThan, lexicographicComparator} from '../util/comparator';\n\n/**\n * Standard quicksort\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function dualPivotQuicksort (array, comparator = lexicographicComparator) {\n    let lessThan = comparatorToLessThan(comparator),\n        arraySwap = arraySwapPartial(array);\n    function quicksort (left, right) {\n        if (left < right) {\n            if (lessThan(array[right], array[left])) {\n                arraySwap(left, right);\n            }\n            let pivot1 = array[left],\n                pivot2 = array[right],\n                l = left + 1,\n                g = right - 1,\n                k = l;\n            for (k; k <= g; k++) {\n                if (lessThan(array[k], pivot1)) {\n                    arraySwap(k, l++);\n                } else if (!lessThan(array[k], pivot2)) {\n                    while (lessThan(pivot2, array[g]) && k < g) {\n                        --g;\n                    }\n                    arraySwap(k, g--);\n                    if (lessThan(array[k], pivot1)) {\n                        arraySwap(k, l++);\n                    }\n                }\n            }\n            arraySwap(left, --l);\n            arraySwap(right, ++g);\n            quicksort(left, l - 1);\n            quicksort(l + 1, g - 1);\n            quicksort(g + 1, right);\n        }\n    }\n    quicksort(0, array.length - 1);\n    return array;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/quicksort/dualPivotQuicksort.js\n **/","import {comparatorToLessThan, lexicographicComparator} from '../util/comparator';\n\nlet concat = Array.prototype.concat;\n\n/**\n * Standard quicksort\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function quicksort (array, comparator = lexicographicComparator) {\n    let lessThan = comparatorToLessThan(comparator);\n    function _quicksort (array) {\n        if (array.length <= 1) {\n            return array;\n        }\n        let left = [],\n            right = [],\n            index = 0,\n            length = array.length,\n            pivot = array[0],\n            value;\n\n        while (++index < length) {\n            value = array[index];\n            if (lessThan(value, pivot)) {\n                left.push(value);\n            } else {\n                right.push(value);\n            }\n        }\n        return concat.call(_quicksort(left), pivot, _quicksort(right));\n    }\n    return _quicksort(array);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/quicksort/quicksort.js\n **/","import {lexicographicComparator} from '../util/comparator';\n\nlet concat = Array.prototype.concat;\n\n/**\n * A functional programming implementation of quicksort.\n * http://rosettacode.org/wiki/Sorting_algorithms/Quicksort#JavaScript\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function quicksortFunctional (array, comparator = lexicographicComparator) {\n    function quicksort (array) {\n        if (array.length <= 1) {\n            return array;\n        }\n        let pivot = array[Math.floor(array.length / 2)];\n        return concat.call(\n            quicksort(array.filter(x => comparator(x, pivot) < 0)),\n            array.filter(x => comparator(x, pivot) === 0),\n            quicksort(array.filter(x => comparator(x, pivot) > 0)));\n    }\n    return quicksort(array);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/quicksort/quicksortFunctional.js\n **/","import {arraySwapPartial} from '../util/arraySwap';\nimport {comparatorToLessThan, lexicographicComparator} from '../util/comparator';\n\n/**\n * An in-place quicksort\n * http://rosettacode.org/wiki/Sorting_algorithms/Quicksort#JavaScript\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function quicksortInplace (array, comparator = lexicographicComparator) {\n    let lessThan = comparatorToLessThan(comparator),\n        arraySwap = arraySwapPartial(array);\n    function quicksort (left, right) {\n        if (left < right) {\n            let pivot = array[(left + right) >> 1],\n                i = left,\n                j = right;\n            do {\n                while (lessThan(array[i], pivot)) {\n                    i++;\n                }\n                while (lessThan(pivot, array[j])) {\n                    j--;\n                }\n                if (i <= j) {\n                    arraySwap(i++, j--);\n                }\n            } while (i <= j);\n            quicksort(left, j);\n            quicksort(i, right);\n        }\n    }\n    quicksort(0, array.length - 1);\n    return array;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/quicksort/quicksortInplace.js\n **/","import {arraySwapPartial} from '../util/arraySwap';\nimport {comparatorToLessThan, lexicographicComparator} from '../util/comparator';\n\n/**\n * Standard Selection Sort\n * @param {Array<*>} array\n * @param {Function} [comparator=lexicographicComparator]\n * @returns {Array<*>}\n */\nexport default function selectionSort (array, comparator = lexicographicComparator) {\n    let lessThan = comparatorToLessThan(comparator),\n        arraySwap = arraySwapPartial(array),\n        length = array.length,\n        min,\n        i,\n        j;\n\n    for (i = 0; i < length; i++) {\n        min = i;\n        for (j = i + 1; j < length; j++) {\n            if (lessThan(array[j], array[min])) {\n                min = j;\n            }\n        }\n        if (i !== min) {\n            arraySwap(i, min);\n        }\n    }\n    return array;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/selectionSort/selectionSort.js\n **/"],"sourceRoot":""}